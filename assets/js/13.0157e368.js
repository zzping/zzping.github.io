(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{393:function(s,e,a){"use strict";a.r(e);var t=a(45),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[s._v("#")]),s._v(" Dockerfile")]),s._v(" "),a("h2",{attrs:{id:"dockerfile-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-是什么"}},[s._v("#")]),s._v(" Dockerfile 是什么")]),s._v(" "),a("p",[s._v("Dockerfile 是 Docker 用来构建镜像的文本文件，它包含指定的指令和格式。可以通过 docker build 命令从Dockerfile")]),s._v(" "),a("p",[s._v("中构建镜像。即 Dockerfile 是 docker 镜像的描述文件。")]),s._v(" "),a("p",[s._v("Dockerfile 没有后缀，文件名就是 Dockerfile。")]),s._v(" "),a("blockquote",[a("p",[s._v("Dockerfile 使用手册: https://docs.docker.com/engine/reference/builder/\nDockerfile 最佳实践: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/")])]),s._v(" "),a("p",[a("img",{attrs:{src:"/images/docker/101-docker%E6%A0%B8%E5%BF%83%E6%93%8D%E4%BD%9C.png",alt:"docker核心操作"}})]),s._v(" "),a("p",[a("code",[s._v("为什么要存在 Dockerfile？")])]),s._v(" "),a("blockquote",[a("p",[s._v("问题：")]),s._v(" "),a("p",[s._v("dockerhub 已经提供了很多完善的镜像，要什么镜像都有，为什么还需要我们使用 Dockerfile 构建镜像呢？")]),s._v(" "),a("p",[s._v("答案：")]),s._v(" "),a("p",[s._v("我们不会构建官方已经构建好的镜像，我们是将自己开发的应用通过 Dockerfile 打包成镜像，方便将我们的应用以容器的方式运行。")])]),s._v(" "),a("h2",{attrs:{id:"dockerfile-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-语法"}},[s._v("#")]),s._v(" Dockerfile 语法")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("保留字")]),s._v(" "),a("th",[s._v("作用")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("FROM")]),s._v(" "),a("td",[s._v("当前镜像是基于哪个镜像的 "),a("code",[s._v("第一个指令必须是FROM")])])]),s._v(" "),a("tr",[a("td",[s._v("MAINTAINER")]),s._v(" "),a("td",[s._v("镜像维护者的姓名和邮箱地址（deprecated，已经标记为废弃）")])]),s._v(" "),a("tr",[a("td",[s._v("RUN")]),s._v(" "),a("td",[s._v("构建镜像时需要运行的指令")])]),s._v(" "),a("tr",[a("td",[s._v("EXPOSE")]),s._v(" "),a("td",[s._v("当前容器对外暴露出的端口号")])]),s._v(" "),a("tr",[a("td",[s._v("WORKDIR")]),s._v(" "),a("td",[s._v("指定在创建容器后，终端默认登录进来的工作目录，一个落脚点")])]),s._v(" "),a("tr",[a("td",[s._v("ENV")]),s._v(" "),a("td",[s._v("用来在构建镜像过程中设置环境变量")])]),s._v(" "),a("tr",[a("td",[s._v("ADD")]),s._v(" "),a("td",[s._v("将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包")])]),s._v(" "),a("tr",[a("td",[s._v("COPY")]),s._v(" "),a("td",[s._v("类似于ADD，拷贝文件和目录到镜像中"),a("br"),s._v("将从构建上下文目录中<原路径>的文件/目录复制到新的一层的镜像内的<目标路径>位置")])]),s._v(" "),a("tr",[a("td",[s._v("VOLUME")]),s._v(" "),a("td",[s._v("容器数据卷，用于数据保存和持久化工作")])]),s._v(" "),a("tr",[a("td",[s._v("CMD")]),s._v(" "),a("td",[s._v("指定一个容器启动时要运行的命令"),a("br"),s._v("Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换")])]),s._v(" "),a("tr",[a("td",[s._v("ENTRYPOINT")]),s._v(" "),a("td",[s._v("指定一个容器启动时要运行的命令"),a("br"),s._v("ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数")])])])]),s._v(" "),a("h3",{attrs:{id:"from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[s._v("#")]),s._v(" FROM")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("FROM")]),s._v(" 用来指定 Dockerfile 的基础镜像`。一个有效的 Dockerfile 文件的必须以 FROM 指令作为第一条非注释指令。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("FROM centos:7\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("h3",{attrs:{id:"maintainer-deprecated"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maintainer-deprecated"}},[s._v("#")]),s._v(" MAINTAINER（Deprecated）")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("MAINTAINER")]),s._v(" 用来指定镜像的作者信息`，目前已经被废弃了。")])]),s._v(" "),a("h3",{attrs:{id:"run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[s._v("#")]),s._v(" RUN")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("RUN")]),s._v(" 用来在构建镜像的过程中执行一些 shell 命令`，有两种写法：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("写法一： RUN 后面直接写 shell 命令\nRUN "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i love docker"')]),s._v("\n\n写法二： RNN 后面是数组形式\nRUN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"echo"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i love docker"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("RUN 后面跟 shell 命令时，可以通过反斜杠 \\ 将 RUN 指令继续到下一行，例如考虑以下两行：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("RUN "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i love \\\ndocker"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("简单测试一下 RUN 指令")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拉取 centos:7 镜像作为基础镜像")]),s._v("\ndocker pull centos:7\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建一个空目录 并进入该目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" dockerfile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" dockerfile\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建 Dockerfile 文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" Dockerfile\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在 Dockerfile 文件中添加如下内容")]),s._v("\nFROM centos:7\nRUN "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'echo Hello Docker'")]),s._v("\nRUN "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'echo I Love \\\nDocker'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 编辑完成后 !wq 保存退出, 使用 docker build 指令构建镜像")]),s._v("\ndocker build -t mycentos7:01 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行 docker build 命令时输出如下：")]),s._v("\nSending build context to Docker daemon  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".048kB\nStep "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/3 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" FROM centos:7\n---"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 8652b9f0cb4c\nStep "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("/3 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" RUN "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello Docker'")]),s._v("\n---"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Running "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" 68456a5293e2\nHello Docker\nRemoving intermediate container 68456a5293e2\n---"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 4a9da7141074\nStep "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("/3 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" RUN "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I Love Docker'")]),s._v("\n---"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Running "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" 992bf24f4888\nI Love Docker\nRemoving intermediate container 992bf24f4888\n---"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 46ed511f4281\nSuccessfully built 46ed511f4281\nSuccessfully tagged mycentos7:01\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])])]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("EXPOST")]),s._v(" 用来指定构建的镜像在运行为容器时对外暴露的端口，只有 EXPOSE 指定了某个端口，使用 docker run 运行的时候才能通过 -p 对该端口进行映射。可以指定端口是侦听 TCP 还是 UDP，如果未指定协议，则默认值为 TCP")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不指定类型，默认是 tcp 端口")]),s._v("\nEXPOST "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定 udp 端口")]),s._v("\nEXPOST "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/udp\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 同时暴露 tcp 和 udp 的 80 端口")]),s._v("\nEXPOST "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/tcp\nEXPOST "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/udp\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行容器时候也可以指定端口类型")]),s._v("\ndocker run -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80/tcp -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80/udp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])]),s._v(" "),a("h3",{attrs:{id:"workdir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[s._v("#")]),s._v(" WORKDIR")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("WORKDIR")]),s._v("  可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。")]),s._v(" "),a("p",[s._v("WORKDIR 指令可在 Dockerfile 中多次使用。 如果提供了相对路径，则它将相对于上一个WORKDIR 指令的路径")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("WORKDIR /a\nWORKDIR b\nWORKDIR c\nRUN "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 上面的指令执行后最终的输出是 /a/b/c")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("WORKDIR 指令可以解析以前使用 ENV 设置的环境变量。 您只能使用在 Dockerfile 中显式设置的环境变量。 例如：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("ENV "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DIRPATH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/path\nWORKDIR "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$DIRPATH")]),s._v("/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$DIRNAME")]),s._v("\nRUN "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 上面的指令执行后最终的输出是 /path/$DIRNAME")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("h3",{attrs:{id:"copy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[s._v("#")]),s._v(" COPY")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("COPY")]),s._v(" 指令将从构建上下文目录中 "),a("code",[s._v("<源路径>")]),s._v(" 的文件/目录复制到新的一层的镜像内的 "),a("code",[s._v("<目标路径>")]),s._v(" 位置。比如：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("COPY package.json /usr/src/app/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("<源路径>")]),s._v(" 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 "),a("a",{attrs:{href:"https://golang.org/pkg/path/filepath/#Match",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("filepath.Match")]),a("OutboundLink")],1),s._v(" 规则，如：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("COPY hom* /mydir/\nCOPY hom?.txt /mydir/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("<目标路径>")]),s._v(" 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 "),a("code",[s._v("WORKDIR")]),s._v(" 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。")]),s._v(" "),a("p",[s._v("此外，还需要注意一点，使用 "),a("code",[s._v("COPY")]),s._v(" 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。")])]),s._v(" "),a("h3",{attrs:{id:"add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[s._v("#")]),s._v(" ADD")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("ADD")]),s._v(" 指令和 "),a("code",[s._v("COPY")]),s._v(" 的格式和性质基本一致。但是在 "),a("code",[s._v("COPY")]),s._v(" 基础上增加了一些功能。")]),s._v(" "),a("p",[s._v("如果 "),a("code",[s._v("<源路径>")]),s._v(" 为一个 "),a("code",[s._v("tar")]),s._v(" 压缩文件的话，压缩格式为 "),a("code",[s._v("gzip")]),s._v(", "),a("code",[s._v("bzip2")]),s._v(" 以及 "),a("code",[s._v("xz")]),s._v(" 的情况下，"),a("code",[s._v("ADD")]),s._v(" 指令将会自动解压缩这个压缩文件到 "),a("code",[s._v("<目标路径>")]),s._v(" 去。")]),s._v(" "),a("p",[s._v("比如 "),a("code",[s._v("<源路径>")]),s._v(" 可以是一个 "),a("code",[s._v("URL")]),s._v("，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 "),a("code",[s._v("<目标路径>")]),s._v(" 去。下载后的文件权限自动设置为 "),a("code",[s._v("600")]),s._v("，如果这并不是想要的权限，那么还需要增加额外的一层 "),a("code",[s._v("RUN")]),s._v(" 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 "),a("code",[s._v("RUN")]),s._v(" 指令进行解压缩。所以不如直接使用 "),a("code",[s._v("RUN")]),s._v(" 指令，然后使用 "),a("code",[s._v("wget")]),s._v(" 或者 "),a("code",[s._v("curl")]),s._v(" 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。")]),s._v(" "),a("p",[s._v("在 Docker 官方的 "),a("a",{attrs:{href:"https://www.bookstack.cn/read/docker-practice/appendix-best_practices.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("Dockerfile 最佳实践文档"),a("OutboundLink")],1),s._v(" 中要求，尽可能的使用 "),a("code",[s._v("COPY")]),s._v("，因为 "),a("code",[s._v("COPY")]),s._v(" 的语义很明确，就是复制文件而已，而 "),a("code",[s._v("ADD")]),s._v(" 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 "),a("code",[s._v("ADD")]),s._v(" 的场合，就是所提及的需要自动解压缩的场合。")])]),s._v(" "),a("h3",{attrs:{id:"volume"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[s._v("#")]),s._v(" VOLUME")]),s._v(" "),a("blockquote",[a("p",[s._v("TODO")])]),s._v(" "),a("h3",{attrs:{id:"cmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[s._v("#")]),s._v(" CMD")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("CMD")]),s._v(" 指令就是用于指定默认的容器主进程的启动命令的。因为 Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。它也有两种格式：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("shell")]),s._v(" 格式：CMD <命令>")]),s._v(" "),a("li",[a("code",[s._v("exec")]),s._v(' 格式：CMD ["可执行文件", "参数1", "参数2"...]')])]),s._v(" "),a("p",[s._v("在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，"),a("code",[s._v("ubuntu")]),s._v(" 镜像默认的 "),a("code",[s._v("CMD")]),s._v(" 是 "),a("code",[s._v("/bin/bash")]),s._v("，如果我们直接 "),a("code",[s._v("docker run -it ubuntu")]),s._v(" 的话，会直接进入 "),a("code",[s._v("bash")]),s._v("。我们也可以在运行时指定运行别的命令，如 "),a("code",[s._v("docker run -it ubuntu cat /etc/os-release")]),s._v("。这就是用 "),a("code",[s._v("cat /etc/os-release")]),s._v(" 命令替换了默认的 "),a("code",[s._v("/bin/bash")]),s._v(" 命令了，输出了系统版本信息。")]),s._v(" "),a("p",[s._v("在指令格式上，一般推荐使用 "),a("code",[s._v("exec")]),s._v(" 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 "),a("code",[s._v('"')]),s._v("，而不要使用单引号。")]),s._v(" "),a("p",[s._v("如果使用 "),a("code",[s._v("shell")]),s._v(" 格式的话，实际的命令会被包装为 "),a("code",[s._v("sh -c")]),s._v(" 的参数的形式进行执行。比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("CMD echo $HOME\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在实际执行中，会将其变更为：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('CMD [ "sh", "-c", "echo $HOME" ]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。")])]),s._v(" "),a("h3",{attrs:{id:"entrypoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[s._v("#")]),s._v(" ENTRYPOINT")]),s._v(" "),a("blockquote",[a("p",[s._v("https://www.bookstack.cn/read/docker-practice/image-dockerfile-entrypoint.md")]),s._v(" "),a("p",[a("code",[s._v("ENTRYPOINT")]),s._v(" 的格式和 "),a("code",[s._v("RUN")]),s._v(" 指令格式一样，分为 "),a("code",[s._v("exec")]),s._v(" 格式和 "),a("code",[s._v("shell")]),s._v(" 格式。")]),s._v(" "),a("p",[a("code",[s._v("ENTRYPOINT")]),s._v(" 的目的和 "),a("code",[s._v("CMD")]),s._v(" 一样，都是在指定容器启动程序及参数。"),a("code",[s._v("ENTRYPOINT")]),s._v(" 在运行时也可以替代，不过比 "),a("code",[s._v("CMD")]),s._v(" 要略显繁琐，需要通过 "),a("code",[s._v("docker run")]),s._v(" 的参数 "),a("code",[s._v("--entrypoint")]),s._v(" 来指定。")]),s._v(" "),a("p",[s._v("当指定了 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 后，"),a("code",[s._v("CMD")]),s._v(" 的含义就发生了改变，不再是直接的运行其命令，而是将 "),a("code",[s._v("CMD")]),s._v(" 的内容作为参数传给 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 指令，换句话说实际执行时，将变为：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ENTRYPOINT"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<CMD>"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"dockerfile-构建镜像用法详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-构建镜像用法详解"}},[s._v("#")]),s._v(" Dockerfile 构建镜像用法详解")]),s._v(" "),a("p",[a("code",[s._v("docker build")]),s._v(" 命令基于 Dockerfile 和上下文构建镜像。构建的上下文有两个来源")]),s._v(" "),a("ul",[a("li",[s._v("PATH： 本地文件系统上的目录")]),s._v(" "),a("li",[s._v("URL：Git 仓库的地址")])]),s._v(" "),a("p",[s._v("通常我们会新建一个空目录，在空目录中新建 Dockerfile 文件，并把构建过程中需要的文件或者资源放在该目录下，这整个目录就是"),a("code",[s._v("构建的上下文")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("docker build")]),s._v(" 命令是由 Docker 的守护进程来执行，而不是 Docker CLI 的客户端。因此，"),a("code",[s._v("docker build")]),s._v(" 命令的第一步是将构建上下文所在的整个目录下的所有资源文件及目录都进行打包，然后一起发送到 Docker daemon。由 Docker daemon 首先检查 Dockerfile 的语法，然后逐一执行 Dockerfile 文件的指令，每执行一条指令都会生成一个新的镜像。最后执行完生成一个最终镜像。")]),s._v(" "),a("p",[s._v("![docker build命令执行的过程](images/13-docker build命令的执行过程.png)")]),s._v(" "),a("p",[s._v("如果在构建上下文中希望忽略某些文件，不希望将某些文件打包发送达到 Docker daemon，可以在构建上下文目录下添加一个 "),a("code",[s._v(".dockerignore")]),s._v(" 文件（类似 .gitignore 功能一样）用于排除某些文件。")]),s._v(" "),a("h2",{attrs:{id:"使用-dockerfile-构建-springboot-应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerfile-构建-springboot-应用"}},[s._v("#")]),s._v(" 使用 Dockerfile 构建 SpringBoot 应用")]),s._v(" "),a("p",[s._v('（1）开发一个简单的 Spring Boot 应用，请求 /hello，响应 "Hello Docker" 字符串。')]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RestController")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloController")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@GetMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello Docker!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello Docker!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])]),s._v(" "),a("p",[s._v("（2）将 Spring Boot 应用打包成 jar（demo-0.0.1-SNAPSHOT.jar） ，并上传到 linux 系统中 /root/apps 目录下")]),s._v(" "),a("p",[s._v("（3）在 /root/apps 目录下新建一个 Dockerfile 文件")]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /root/apps\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" Dockerfile\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加如下内容达到 Dockerfile 文件中")]),s._v("\nFROM openjdk:8-jre\nADD demo-0.0.1-SNAPSHOT.jar demo.jar\nEXPOSE "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v("\nENTRYPOINT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"java"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-jar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nCMD "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"demo.jar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# !wq 保存退出, 然后使用 docker build 命令通过 Dockerfile 构建镜像")]),s._v("\ndocker build -t demo:01 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据镜像运行容器")]),s._v("\ndocker run -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(":8080 --name app01 -d demo:01\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 实时查看容器日志")]),s._v("\ndocker logs -f app01\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 浏览器访问 http://192.168.145.31:8080/hello")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"dockerfile-最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-最佳实践"}},[s._v("#")]),s._v(" Dockerfile 最佳实践")]),s._v(" "),a("blockquote",[a("p",[s._v("官方文档： "),a("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Dockerfile最佳实践"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);