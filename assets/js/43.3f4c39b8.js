(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{376:function(a,t,v){"use strict";v.r(t);var s=v(45),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"运行时数据区域之-java-堆"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#运行时数据区域之-java-堆"}},[a._v("#")]),a._v(" 运行时数据区域之 - Java 堆")]),a._v(" "),v("h2",{attrs:{id:"java-堆的概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-堆的概述"}},[a._v("#")]),a._v(" Java 堆的概述")]),a._v(" "),v("blockquote",[v("p",[a._v("对于 Java 应用程序来说，Java 堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块区域，在虚拟机启动时创建，此内存区域的唯一目的就是存放对象实例。")]),a._v(" "),v("p",[a._v("Java 世界里几乎所有的对象实例都在这里分配（栈上分配、标量替换）。")]),a._v(" "),v("p",[a._v("根据《Java 虚拟机规范》的规定，Java 堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。")]),a._v(" "),v("p",[a._v("从内存分配的角度看，所有线程共享的 Java 堆中可以划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB），用以提高对象分配时的效率。")])]),a._v(" "),v("h2",{attrs:{id:"堆内存细分"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#堆内存细分"}},[a._v("#")]),a._v(" 堆内存细分")]),a._v(" "),v("p",[a._v("为了更好的支持对象分配和垃圾收集，Java 堆内存可以细分为： "),v("code",[a._v("新生代")]),a._v("、"),v("code",[a._v("老年代")]),a._v(" ，默认为 1：2")]),a._v(" "),v("p",[a._v("新生代被细分为 Eden 区和两个 Survivor 区（from、to），默认比例 eden : from : to = 8:1:1")]),a._v(" "),v("p",[v("img",{attrs:{src:"/images/jvm/%E5%A0%86%E7%A9%BA%E9%97%B4%E7%BB%86%E5%88%86.png",alt:"堆内存细分"}})]),a._v(" "),v("h2",{attrs:{id:"设置堆内存大小与oom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设置堆内存大小与oom"}},[a._v("#")]),a._v(" 设置堆内存大小与OOM")]),a._v(" "),v("p",[v("strong",[a._v("（1）如何设置和查看堆内存大小")])]),a._v(" "),v("blockquote",[v("p",[a._v("Java 堆既可以被实现成固定大小的，也可以是可扩展的。不过当前主流的 Java 虚拟机都是按照可扩展来实现的，通过 -Xms、-Xmx 参数设置堆空间的内存大小。Java 堆的大小在 JVM 启动的时候就已经设定好了。")]),a._v(" "),v("ul",[v("li",[v("code",[a._v("-Xms： 设置堆内存的初始大小，等价于 -XX:InitialHeadpSize，默认值为物理电脑内存/64")])]),a._v(" "),v("li",[v("code",[a._v("-Xmx： 设置堆内存的最大内存，等价于 -XX:MaxHeapSize，默认值为物理电脑内存/4")])])]),a._v(" "),v("hr"),a._v(" "),v("p",[a._v("查看堆空间大小和各个参数的值：")]),a._v(" "),v("p",[a._v("（1）方式一： 加参数 -XX:PrintGCDetails")]),a._v(" "),v("p",[a._v("（2）方式二： jps 查看进程号，然后 jstat -gc 进程的pid")]),a._v(" "),v("hr"),a._v(" "),v("p",[a._v("如果在 Java 堆内没有内存可以完成实例分配，并且堆也无法再扩展时，Java 虚拟机将会抛出 OutOfMemoryError 异常。")]),a._v(" "),v("blockquote",[v("p",[a._v("注意：在通常情况下，服务器项目在运行过程中，堆空间会不断的收缩与扩张，势必会造成不必要的系统压力。\n所以在生产环境中，"),v("code",[a._v("JVM")]),a._v("的"),v("code",[a._v("Xms")]),a._v("和"),v("code",[a._v("Xmx")]),a._v("要设置成一样的，能够避免"),v("code",[a._v("GC")]),a._v("在调整堆大小带来的不必要的压力。")])])]),a._v(" "),v("p",[v("strong",[a._v("（2）OOM 举例")])]),a._v(" "),v("blockquote",[v("p",[v("strong",[a._v("注意： OOM 总共有8种情况，Java heap space 只是其中的一种 OOM")])]),a._v(" "),v("p",[v("img",{attrs:{src:"/images/jvm/OOM1.png",alt:"oom1"}})])]),a._v(" "),v("h2",{attrs:{id:"新生代和老年代以及相关参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#新生代和老年代以及相关参数"}},[a._v("#")]),a._v(" 新生代和老年代以及相关参数")]),a._v(" "),v("p",[a._v("Java 堆可以分为新生代和老年代，其中新生代又分为 Eden 和两个 Suvivor（from、to） 区，示意图如下：")]),a._v(" "),v("p",[v("img",{attrs:{src:"/images/jvm/%E5%A0%86%E7%A9%BA%E9%97%B4%E7%BB%86%E5%88%86.png",alt:"新生代和老年代"}})]),a._v(" "),v("p",[a._v("（1）设置堆空间中新生代和老年代的大小比例： -XX:NewRation=2")]),a._v(" "),v("blockquote",[v("p",[a._v("-XX:NewRatio=2， 默认老年代和新生代为2 : 1，即新生代占整个堆空间的1/3，老年代占整个堆空间的2/3。")]),a._v(" "),v("p",[a._v("-XX:NewRatio=4， 表示老年代和新生代为4 : 1，即新生代占1/5，老年代占4/5。")]),a._v(" "),v("p",[a._v("-XX:NewRatio 参数官方文档：https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html")]),a._v(" "),v("p",[v("code",[a._v("两种方式设置新生代和老年代的大小：")])]),a._v(" "),v("p",[a._v("（1）-Xms、-Xmx、-XXNewRatio")]),a._v(" "),v("p",[a._v("（2）-Xms、-Xmx、-Xmn（设置新生代内存初始值和最大值）")]),a._v(" "),v("p",[v("code",[a._v("同时设置了 -XXNewRatio 和 -Xmn 的话, 则是以 -Xmn 为准")])])]),a._v(" "),v("p",[a._v("（2）设置新生代中 Eden 和 Survivor 的大小比例： -XX:SurvivorRatio=8")]),a._v(" "),v("blockquote",[v("p",[a._v("-XX:SurvivorRatio=8， 默认值为8，表示新生代中 Eden 和 两个 Survivor 区的比例。")])]),a._v(" "),v("p",[a._v("（3）几乎所有的对象都是在 Eden 区被 new 出来的")]),a._v(" "),v("blockquote",[v("p",[a._v("几乎所有的对象都是在 Eden 区被 new 出来的")]),a._v(" "),v("p",[a._v("IBM 公司的专门研究表明，新生代中 80% 的对象都是 “朝生夕死”的。")])]),a._v(" "),v("p",[a._v("（4）设置新生代内存大小： -Xmn")]),a._v(" "),v("blockquote",[v("p",[a._v("官方资料搜索 -Xmn： "),v("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("-Xmn"),v("OutboundLink")],1)]),a._v(" "),v("p",[a._v("Instead of the "),v("code",[a._v("-Xmn")]),a._v(" option to set both the initial and maximum size of the heap for the young generation, you can use "),v("code",[a._v("-XX:NewSize")]),a._v(" to set the initial size and "),v("code",[a._v("-XX:MaxNewSize")]),a._v(" to set the maximum size.")])]),a._v(" "),v("h2",{attrs:{id:"图解对象分配的过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#图解对象分配的过程"}},[a._v("#")]),a._v(" 图解对象分配的过程")]),a._v(" "),v("p",[a._v("为新对象分配内存是一件非常严谨和复杂的任务，JVM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。在堆空间中给一个新对象分配内存的过程如下：")]),a._v(" "),v("p",[a._v("1、new 的对象先放到 Eden 区域，此区域有大小限制。")]),a._v(" "),v("p",[a._v("2、当 Eden 区空间放满了，并且还需要创建新的对象时，将会对 Eden 区域进行垃圾回收（Minor GC），将 Eden 区域中不再被其他对象所引用的对象进行销毁，然后再加载要创建的新对象放到 Eden 区域，最后将伊甸园中的剩余对象移动到 s0 区域。")]),a._v(" "),v("p",[a._v("3、如果再次出发垃圾回收，此使上次幸存下来的放到 s0 区域的，如果还没有被回收，就会放到 s1 区域。")]),a._v(" "),v("p",[a._v("4、如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。")]),a._v(" "),v("p",[a._v("5、啥时候能去养老区呢？可以设置次数（-Xx:MaxTenuringThreshold= N）。默认是15次。")]),a._v(" "),v("p",[a._v("6、在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理。")]),a._v(" "),v("p",[a._v("7、若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常。")]),a._v(" "),v("blockquote",[v("p",[a._v("关于垃圾回收： 频繁在新生代收集、很少在老年代收集、几乎不在永久代 / 元空间进行收集")])]),a._v(" "),v("h2",{attrs:{id:"minorgc、majorgc、fullgc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#minorgc、majorgc、fullgc"}},[a._v("#")]),a._v(" MinorGC、MajorGC、FullGC")]),a._v(" "),v("blockquote",[v("p",[a._v("相关文章： "),v("a",{attrs:{href:"https://www.zhihu.com/question/41922036",target:"_blank",rel:"noopener noreferrer"}},[a._v("Major GC和 Full GC 的区别是什么"),v("OutboundLink")],1)])]),a._v(" "),v("p",[a._v("JVM 在进行 GC 时，并不是每次都对三个区域（新生代、老年代、方法区），大部分时候回收的都是新生代。")]),a._v(" "),v("p",[a._v("针对 HotSpot VM 的实现，它里面的 GC 按照回收区域分为了两大类：")]),a._v(" "),v("ul",[v("li",[a._v("部分收集（Partial GC）：并不对整个 Java 对进行垃圾收集。\n"),v("ul",[v("li",[a._v("新生代收集（Minor GC / Young GC）： 只对生代进行垃圾收集")]),a._v(" "),v("li",[a._v("老年代收集（Major GC / Old GC）： 只对老年代进行垃圾收集，"),v("code",[a._v("只有 CMS 收集器会有这个模式")])]),a._v(" "),v("li",[a._v("混合收集（Mixed GC）： 收集整个新生代和部分老年代，"),v("code",[a._v("只有 G1 收集器会有这种模式")])])])]),a._v(" "),v("li",[a._v("整堆收集（Full GC）：针对整个 Java 堆和方法区都进行垃圾收集。")])]),a._v(" "),v("hr"),a._v(" "),v("p",[v("strong",[a._v("（1）Minor GC")])]),a._v(" "),v("p",[a._v("Minor GC： 也称为 Young GC，指的是只针对新生代的垃圾收集。每次 Minor GC 都会清理新生代的内存。Minor GC 会引发 STW（Stop The World），但是通常时间都很短暂，影响并不大。")]),a._v(" "),v("p",[v("code",[a._v("MinorGC 触发条件")]),a._v("：")]),a._v(" "),v("p",[a._v("1、当新生代的 Eden 区域满了，这时候还需要将新的对象分配到 Eden 区域")]),a._v(" "),v("p",[a._v("2、当新生代的 Eden 区域还没满，但是将要分配的新的对象大小大于 Eden 区域剩下的内存空间")]),a._v(" "),v("blockquote",[v("p",[a._v("注意点： Eden 区满了会触发 MinorGC，Survivor 区满了不会触发 MinorGC。")])]),a._v(" "),v("p",[v("strong",[a._v("（2）Major GC")])]),a._v(" "),v("p",[a._v("Major GC： 也称为 Old GC/Full GC， 指的是发生在老年代的垃圾收集行为。在老年代空间不足时，会触发 Major GC，但是在此之前至少会有一次 Minor GC。")]),a._v(" "),v("p",[a._v("Major GC 的时间一般会比 Minor GC 长 10 倍以上，所以 STW 时间也更长。")]),a._v(" "),v("p",[a._v("如果 Major GC 后，内存还是不足，就会报 OOM 了。")]),a._v(" "),v("p",[v("strong",[a._v("（3）Full GC")])]),a._v(" "),v("p",[a._v("Full GC： 指的是针对整个 Java 堆（新生代、老年代）和方法区的垃圾收集。")]),a._v(" "),v("p",[v("code",[a._v("Full GC 的触发条件")]),a._v("：")]),a._v(" "),v("p",[a._v("1、调用System.gc时，系统建议执行Full GC，但是不一定会执行 。")]),a._v(" "),v("p",[a._v("2、老年代空间不足")]),a._v(" "),v("p",[a._v("3、方法区空间不足")]),a._v(" "),v("p",[a._v("4、通过 Minor GC 后进入老年代的空间大于老年代的可用内存")]),a._v(" "),v("p",[a._v("5、内存空间担保。")]),a._v(" "),v("blockquote",[v("p",[a._v("Full GC 在实际开发中是要尽量避免的。调优的主要目的就是为了减少 GC，降低 STW 的时间。")])]),a._v(" "),v("h2",{attrs:{id:"堆空间分代思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#堆空间分代思想"}},[a._v("#")]),a._v(" 堆空间分代思想")]),a._v(" "),v("p",[a._v('Java 堆内存是内存管理中重点进行垃圾收集的空间。从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以 Java 堆中经常会出现 "新生代"、"老年代" 、"Eden 区"、"Survivor 区" 等名词。之所以有这些区域的划分仅仅是因为一部分垃圾收集器的共同特性或者说设计风格而已，而并非是某个 Java 虚拟机具体实现的内存布局，更不是《Java 虚拟机规范》对 Java 堆的进一步细致划分。')]),a._v(" "),v("p",[a._v('在十多年前（以 G1 收集器的出现为分界），作为业界绝对主流的 HotSpot 虚拟机，它内部的收集器全部都是基于 "经典分代" 来进行设计的，需要新生代、老年代收集器搭配才能工作。')]),a._v(" "),v("p",[a._v("但是时至今日，垃圾收集技术和10多年前相比已经不可同日而语，HotSpot 虚拟机里面也出现了不采用分代设计的新的垃圾收集器。所以再用之前的分代思想来理解堆空间和方法区其实是有待商榷的。")]),a._v(" "),v("h2",{attrs:{id:"堆空间中每个线程私有的缓冲区-tlab"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#堆空间中每个线程私有的缓冲区-tlab"}},[a._v("#")]),a._v(" 堆空间中每个线程私有的缓冲区 - TLAB")]),a._v(" "),v("blockquote",[v("p",[a._v("相关文章： "),v("a",{attrs:{href:"https://www.zhihu.com/question/56538259",target:"_blank",rel:"noopener noreferrer"}},[a._v("在 TLAB 中创建的对象，如何被其他线程共享"),v("OutboundLink")],1)])]),a._v(" "),v("p",[v("strong",[a._v("（1）什么是 TLAB")])]),a._v(" "),v("p",[a._v("TLAB： Thread Local Allocation Buffer，它是在堆空间（新生代的 Eden 区）中为每个线程分配的各自线程私有的一个缓冲区。目的是为了提高对象的分配效率。")]),a._v(" "),v("p",[v("strong",[a._v("（2）为什么要有 TLAB")])]),a._v(" "),v("p",[a._v("我们知道，Java 堆空间是被多个线程所共享的内存区域。一个 JVM 进程中的多个线程都可以访问堆中的共享数据。由于对象实例的创建在 JVM 中非常频繁，因此在并发环境下从堆内存中分配内存创建对象是存在线程安全问题的。为了避免线程安全问题，需要使用加锁机制，进而影响"),v("code",[a._v("对象分配时的效率")]),a._v("。")]),a._v(" "),v("p",[a._v("从内存分配而不是垃圾收集的角度来看，所有线程共享的 Java 堆中可以划分出多个线程私有的分配缓冲区。这个缓冲区具体是在新生代的 Eden 区中。它就是 TLAB。TLAB 存在的目的是为了提升对象分配的效率，避免多个线程在分配堆空间中内存因为线程安全问题需要加锁（或者CAS）所带来的效率问题。")]),a._v(" "),v("p",[a._v("有了 TLAB 之后，往 Eden 区域分配内存给对象时首先会使用 TLAB 这一块空间。因为这一块区域是每个线程私有的，分配对象的时候优先使用且不会因为线程安全问题需要加锁，进而提升了对象分配的效率。")]),a._v(" "),v("p",[v("strong",[a._v("（3）TLAB 的相关参数")])]),a._v(" "),v("blockquote",[v("p",[v("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("-XX:+UseTLAB"),v("OutboundLink")],1)]),a._v(" "),v("p",[a._v("Enables the use of thread-local allocation blocks (TLABs) in the young generation space. This option is enabled by default. To disable the use of TLABs, specify "),v("code",[a._v("-XX:-UseTLAB")]),a._v(".")]),a._v(" "),v("hr"),a._v(" "),v("p",[a._v("验证 TLAB 默认是开启的状态：")]),a._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TLABTest")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[a._v("100000")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InterruptedException")]),a._v(" e"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      e"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("TLAB默认开启"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("images"),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("验证TLAB是默认开启的状态"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("png"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n通过 jps 查看正在运行的程序的进程号，然后通过 jinfo 查看指定参数的值，"),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseTLAB")]),a._v(" 前面的"),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("表示该参数是被启用的，如果想要关闭 TLAB，只需要添加参数： `"),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("XX"),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),v("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),v("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseTLAB")]),a._v("`\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br"),v("span",{staticClass:"line-number"},[a._v("3")]),v("br"),v("span",{staticClass:"line-number"},[a._v("4")]),v("br"),v("span",{staticClass:"line-number"},[a._v("5")]),v("br"),v("span",{staticClass:"line-number"},[a._v("6")]),v("br"),v("span",{staticClass:"line-number"},[a._v("7")]),v("br"),v("span",{staticClass:"line-number"},[a._v("8")]),v("br"),v("span",{staticClass:"line-number"},[a._v("9")]),v("br"),v("span",{staticClass:"line-number"},[a._v("10")]),v("br"),v("span",{staticClass:"line-number"},[a._v("11")]),v("br"),v("span",{staticClass:"line-number"},[a._v("12")]),v("br"),v("span",{staticClass:"line-number"},[a._v("13")]),v("br"),v("span",{staticClass:"line-number"},[a._v("14")]),v("br")])])]),a._v(" "),v("p",[v("strong",[a._v("（4） TLAB 的其他相关问题")])]),a._v(" "),v("p",[a._v('TLAB 是 Eden 区中为每个线程分配的线程私有的一块缓冲区，但是它只是在为对象 "分配内存" 的这个动作上是线程独占的，在这块区域分配的对象仍然是属于堆空间的，仍然是被多个线程锁共享。详细解释可以参见知乎 R 大的回答： '),v("a",{attrs:{href:"https://www.zhihu.com/question/56538259",target:"_blank",rel:"noopener noreferrer"}},[a._v("在 TLAB 中创建的对象，如何被其他线程共享？"),v("OutboundLink")],1)]),a._v(" "),v("p",[a._v("从垃圾收集的角度来讲，并没有一个单独收集 TLAB 空间 GC，它和 Eden 中的其他区域都一视同仁的被收集。")]),a._v(" "),v("blockquote",[v("p",[a._v("基于 TLAB 的存在，衍生出一个问题： "),v("code",[a._v("堆空间一定是多个线程共享的吗？")])]),a._v(" "),v("p",[a._v("答案是： 不是，因为还有存在于 Eden 区中的每个线程私有的 TLAB")])]),a._v(" "),v("h2",{attrs:{id:"堆空间相关参数设置小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#堆空间相关参数设置小结"}},[a._v("#")]),a._v(" 堆空间相关参数设置小结")]),a._v(" "),v("p",[a._v("官方的 JVM 参数大全： https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html")]),a._v(" "),v("ul",[v("li",[a._v("-XX:+PrintFlagsInitial  查看所有参数的默认初始值")]),a._v(" "),v("li",[a._v("-XX:+PrintFlagsFinal   查看所有参数的最终值，因为可能会修改某些参数值，修改后不再和初始值相同\n"),v("ul",[v("li",[a._v("具体查看某个参数的值： 首先 jps 查看当前程序的进程号，然后 jinfo -flag NewRatio 进程号查看具体值")])])]),a._v(" "),v("li",[a._v("-Xms  设置堆空间初始内存，默认为物理内存的 1 / 64")]),a._v(" "),v("li",[a._v("-Xmx  设置堆空间最大内存，默认为物理内存的 1 / 4")]),a._v(" "),v("li",[a._v("-Xmn  设置新生代的内存大小（初始值和最大值）")]),a._v(" "),v("li",[a._v("-XX:NewRatio  设置堆中老年代和新生代的大小比例，默认值为 2 ，即老年代占 2 / 3，新生代占 1 / 3")]),a._v(" "),v("li",[a._v("-XX:SuvivorRatio  设置新生代中 Eden 区和 S0/S1 区的比例，默认值为 8")]),a._v(" "),v("li",[a._v("-XX:MaxTenuringThreshold  设置新生代垃圾的最大年龄，默认值为 15")]),a._v(" "),v("li",[a._v("-XX:+PrintGCDetails  设置输出详细的 GC 日志信息")]),a._v(" "),v("li",[a._v("-XX:+PrintGC  设置打印简要的 GC 日志信息")]),a._v(" "),v("li",[a._v("-XX:HandlePromotionFailure  是否设置"),v("code",[a._v("空间分配担保")])])]),a._v(" "),v("hr"),a._v(" "),v("p",[a._v("-XX:HandlePromotionFailure 参数的详细解释：")]),a._v(" "),v("blockquote",[v("p",[a._v("在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("如果大于，则此次Minor GC是安全的")])]),a._v(" "),v("li",[v("p",[a._v("如果小于，则虚拟机会查看"),v("code",[a._v("-XX:HandlePromotionFailure")]),a._v("设置值是否允担保失败。")])]),a._v(" "),v("li",[v("ul",[v("li",[a._v("如果"),v("code",[a._v("HandlePromotionFailure=true")]),a._v("，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。")])])]),a._v(" "),v("li",[v("ul",[v("li",[v("ul",[v("li",[a._v("如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；")])])])])]),a._v(" "),v("li",[v("ul",[v("li",[v("ul",[v("li",[a._v("如果小于，则改为进行一次Full GC。")])])])])]),a._v(" "),v("li",[v("ul",[v("li",[a._v("如果"),v("code",[a._v("HandlePromotionFailure=false")]),a._v("，则改为进行一次Full Gc。")])])])]),a._v(" "),v("p",[a._v("在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行 Full GC。")])]),a._v(" "),v("h2",{attrs:{id:"堆是分配对象的唯一选择吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#堆是分配对象的唯一选择吗"}},[a._v("#")]),a._v(" 堆是分配对象的唯一选择吗？")]),a._v(" "),v("blockquote",[v("p",[a._v("相关问答："),v("a",{attrs:{href:"https://www.zhihu.com/question/27963717/answer/38871719",target:"_blank",rel:"noopener noreferrer"}},[a._v("逃逸分析为何不能在编译期进行"),v("OutboundLink")],1)])]),a._v(" "),v("p",[a._v("在《深入理解 Java 虚拟机》中关于堆内存有这样一段描述：")]),a._v(" "),v("blockquote",[v("p",[a._v("随着 JIT 编译器的发展和"),v("code",[a._v("逃逸分析")]),a._v("技术逐渐成熟，栈上分配、标量替换等优化技术将会导致一些微妙的变化，使得所有的对象都分配到堆上也渐渐变得不是那么绝对了。")])]),a._v(" "),v("p",[v("strong",[a._v("（1）逃逸分析概述")])]),a._v(" "),v("p",[a._v("逃逸分析（Escape Analysis）是目前 Java 虚拟机中比较前沿的优化技术。逃逸分析是一项虚拟机通过分析一个对象的动态作用域来决定是否在 Java 堆上分配内存的技术。如果通过逃逸分析发现一个对象不会逃逸到方法外或者线程之外，则编译器（JVM 中的 JIT 编译器 ，即动态编译，而非 javac 这种静态编译）可以为这个对象实例采用不同程度的优化，比如： "),v("code",[a._v("栈上分配")]),a._v("、"),v("code",[a._v("标量替换")]),a._v("、"),v("code",[a._v("同步消除")])]),a._v(" "),v("p",[a._v("对象的逃逸状态有三种：1、全局逃逸\t2、参数逃逸\t3、没有逃逸")]),a._v(" "),v("p",[v("strong",[a._v("（2）逃逸分析相关参数")])]),a._v(" "),v("ul",[v("li",[a._v("开启逃逸分析：-XX:+DoEscapeAnalysis")]),a._v(" "),v("li",[a._v("关闭逃逸分析：-XX:+DoEscapeAnalysis")]),a._v(" "),v("li",[a._v("显示分析结果：-XX:+PrintEscapeAnalysis")])]),a._v(" "),v("blockquote",[v("p",[a._v("逃逸分析技术在 JavaSE 6u23+ 开始支持，并默认设置为启用状态。")])]),a._v(" "),v("p",[v("strong",[a._v("（3）代码优化之 - 栈上分配")])]),a._v(" "),v("p",[a._v("在 Java 世界中，对象是在 Java 堆中分配内存的，但是有一种情况，如果经过逃逸分析后，发现一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样的好处是： 无需在堆上分配，也无需进行回收和整理内存。")]),a._v(" "),v("p",[v("strong",[a._v("（4）代码优化之 - 标量替换")])]),a._v(" "),v("p",[a._v("如果一个数据已经无法再分解成更小的数据来表示，那么这些数据就可以被称为标量，比如 Java 中的基本数据类型都是标量。相对的，如果一个数据可以继续分解，那么它就被称为聚合量。Java 中的对象就是典型的聚合量。")]),a._v(" "),v("p",[a._v("如果把一个 Java 独享拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为变量替换。")]),a._v(" "),v("ul",[v("li",[a._v("开启标量替换：-XX:+EliminateAllocations")]),a._v(" "),v("li",[a._v("关闭标量替换：-XX:-EliminateAllocations")]),a._v(" "),v("li",[a._v("显示标量替换详情：-XX:+PrintEliminateAllocations")])]),a._v(" "),v("p",[v("strong",[a._v("（5）代码优化之 - 同步消除")])]),a._v(" "),v("p",[a._v("线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量不会逃逸出线程，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争。对这个变量实施的同步措施就可以安全的消除掉（移除该对象的同步锁）。")]),a._v(" "),v("p",[a._v("同步消除在 JDK8 中都是默认开启的，并且同步消除都要建立在逃逸分析的基础上。")]),a._v(" "),v("ul",[v("li",[a._v("开启同步消除：-XX:+EliminateLocks")]),a._v(" "),v("li",[a._v("关闭同步消除：-XX:-EliminateLocks")])])])}),[],!1,null,null,null);t.default=e.exports}}]);