(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{394:function(t,e,a){"use strict";a.r(e);var n=a(45),i=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"beanfactory-和-applicationcontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory-和-applicationcontext"}},[t._v("#")]),t._v(" BeanFactory 和 ApplicationContext")]),t._v(" "),a("blockquote",[a("p",[t._v("官方文档：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/5.3.6/reference/html/core.html#context-introduction-ctx-vs-beanfactory",target:"_blank",rel:"noopener noreferrer"}},[t._v("BeanFactory VS ApplicationContext"),a("OutboundLink")],1)])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Feature")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[a("code",[t._v("BeanFactory")])]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ApplicationContext")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Bean instantiation/wiring")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Integrated lifecycle management")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Automatic "),a("code",[t._v("BeanPostProcessor")]),t._v(" registration")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Automatic "),a("code",[t._v("BeanFactoryPostProcessor")]),t._v(" registration")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Convenient "),a("code",[t._v("MessageSource")]),t._v(" access (for internalization)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Built-in "),a("code",[t._v("ApplicationEvent")]),t._v(" publication mechanism")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")])])])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("（1）两者都是接口，ApplicationContext 继承自 BeanFactory。")]),t._v(" "),a("p",[t._v("（2）BeanFactory 是容器最顶层接口，只具有容器基本的功能，比如获取、管理容器中的 Bean")]),t._v(" "),a("p",[t._v("（3）ApplicationContext 除了具备 BeanFactory 的所有功能之外，还具备事件处理、国际化功能等高级特性。")]),t._v(" "),a("p",[t._v("（4）Bean 创建时间不同： BeanFactory 具有延迟初始化的特点，容器创建时不会立即创建Bean对象，而是在获取 Bean 时才会创建，ApplicationContext 会在容器创建时就完成所有单实例 Bean 的创建和初始化。")]),t._v(" "),a("p",[t._v("（5）BeanFactory 在 spring-beans 的 jar 包中， ApplicationContext 在 spring-context 的 jar 包中。")])])])}),[],!1,null,null,null);e.default=i.exports}}]);