(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{396:function(t,e,o){"use strict";o.r(e);var l=o(45),n=Object(l.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"helloworld-细节解释"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#helloworld-细节解释"}},[t._v("#")]),t._v(" HelloWorld 细节解释")]),t._v(" "),o("p",[t._v("（1）ApplicationContext 是接口（IOC 容器的接口）， 常见的实现类有如下：")]),t._v(" "),o("blockquote",[o("ul",[o("li",[t._v("ClassPathXmlApplicationContext：从类路径下读取 xml 配置文件生成 ioc 容器")]),t._v(" "),o("li",[t._v("FileSystemXmlApplicationContext： 从本地文件系统读取 xml 配置文件生成 ioc 容器")]),t._v(" "),o("li",[t._v("AnnotationConfigApplicationContext： 基于注解配置生成 ioc 容器")])])]),t._v(" "),o("p",[t._v("（2）给容器中注册的组件默认是单实例的，在容器创建完成后就完成了 bean 初始化，而不是在获取 bean 的时候")]),t._v(" "),o("p",[t._v("（3）默认同一个组件在 ioc 容器中是单实例的，在容器启动完成之前完成创建。")]),t._v(" "),o("p",[t._v("（4）获取容器中不存在的组件，会抛出异常："),o("code",[t._v("NoSuchBeanDefinitionException")])]),t._v(" "),o("p",[t._v("（5）注册组件时候使用 "),o("code",[t._v("property 标签")]),t._v("赋值实际上是"),o("code",[t._v("调用 setter 方法进行赋值")]),t._v("的。")]),t._v(" "),o("p",[t._v("（6）JavaBean 的属性名是由什么决定的？")]),t._v(" "),o("blockquote",[o("p",[t._v("（1）是由定义的属性决定的 【×】")]),t._v(" "),o("p",[t._v("（2）是由 setter 方法决定的，去掉 setXxx 中的 set 然后后面字符串首字母小写就是属性名 【✔】")])])])}),[],!1,null,null,null);e.default=n.exports}}]);