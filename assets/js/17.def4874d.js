(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{419:function(e,r,t){"use strict";t.r(r);var o=t(45),n=Object(o.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"docker-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-概述"}},[e._v("#")]),e._v(" Docker 概述")]),e._v(" "),t("blockquote",[t("p",[e._v("官网地址： https://www.docker.com/")]),e._v(" "),t("p",[e._v("官方文档： https://docs.docker.com/")]),e._v(" "),t("p",[e._v("中文参考手册： https://docker_practice.gitee.io/zh-cn/")])]),e._v(" "),t("h2",{attrs:{id:"官方定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#官方定义"}},[e._v("#")]),e._v(" 官方定义")]),e._v(" "),t("blockquote",[t("p",[e._v("官方定义：")]),e._v(" "),t("ul",[t("li",[e._v("We help developers and development teams build and ship apps.")])]),e._v(" "),t("p",[e._v("我们帮助开发人员和开发团队构建和发布应用程序。")]),e._v(" "),t("ul",[t("li",[e._v("We have a complete container solution for you - no matter who you are and where you are on your containerization journey.")])]),e._v(" "),t("p",[e._v("我们为您提供完整的集装箱解决方案-无论您是谁，以及您在集装箱旅行中的位置如何。")]),e._v(" "),t("p",[e._v("总结： Docker 就是一个容器技术。")])]),e._v(" "),t("h2",{attrs:{id:"docker-的-logo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-的-logo"}},[e._v("#")]),e._v(" Docker 的 logo")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/docker/2-Docker%E7%9A%84logo.png",alt:"logo"}})]),e._v(" "),t("blockquote",[t("p",[e._v("解读： 一个鲸鱼背上背了许多个集装箱，每个集装箱就代表了一个容器，容器与容器之间互相隔离。")]),e._v(" "),t("ul",[t("li",[e._v("鲸鱼就是 Docker 的引擎")]),e._v(" "),t("li",[e._v("集装箱就是一个个的容器")])])]),e._v(" "),t("h2",{attrs:{id:"docker-的历史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-的历史"}},[e._v("#")]),e._v(" Docker 的历史")]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("Docker")]),e._v(" 最初是 "),t("code",[e._v("dotCloud")]),e._v(" 公司创始人 "),t("a",{attrs:{href:"https://github.com/shykes",target:"_blank",rel:"noopener noreferrer"}},[e._v("Solomon Hykes"),t("OutboundLink")],1),e._v(" 在法国期间发起的一个公司内部项目，它是基于 "),t("code",[e._v("dotCloud")]),e._v(" 公司多年云服务技术的一次革新，并于 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Docker_(software)",target:"_blank",rel:"noopener noreferrer"}},[e._v("2013 年 3 月以 Apache 2.0 授权协议开源"),t("OutboundLink")],1),e._v("，主要项目代码在 "),t("a",{attrs:{href:"https://github.com/moby/moby",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),t("OutboundLink")],1),e._v(" 上进行维护。"),t("code",[e._v("Docker")]),e._v(" 项目后来还加入了 Linux 基金会，并成立推动 "),t("a",{attrs:{href:"https://opencontainers.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("开放容器联盟（OCI）"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("Docker")]),e._v(" 自开源后受到广泛的关注和讨论，至今其 "),t("a",{attrs:{href:"https://github.com/moby/moby",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub 项目"),t("OutboundLink")],1),e._v(" 已经超过 5 万 7 千个星标和一万多个 "),t("code",[e._v("fork")]),e._v("。甚至由于 "),t("code",[e._v("Docker")]),e._v(" 项目的火爆，在 "),t("code",[e._v("2013")]),e._v(" 年底，"),t("a",{attrs:{href:"https://www.docker.com/blog/dotcloud-is-becoming-docker-inc/",target:"_blank",rel:"noopener noreferrer"}},[e._v("dotCloud 公司决定改名为 Docker"),t("OutboundLink")],1),e._v("。"),t("code",[e._v("Docker")]),e._v(" 最初是在 "),t("code",[e._v("Ubuntu 12.04")]),e._v(" 上开发实现的；"),t("code",[e._v("Red Hat")]),e._v(" 则从 "),t("code",[e._v("RHEL 6.5")]),e._v(" 开始对 "),t("code",[e._v("Docker")]),e._v(" 进行支持；"),t("code",[e._v("Google")]),e._v(" 也在其 "),t("code",[e._v("PaaS")]),e._v(" 产品中广泛应用 "),t("code",[e._v("Docker")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("Docker")]),e._v(" 使用 "),t("code",[e._v("Google")]),e._v(" 公司推出的 "),t("a",{attrs:{href:"https://golang.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Go 语言"),t("OutboundLink")],1),e._v(" 进行开发实现，基于 "),t("code",[e._v("Linux")]),e._v(" 内核的 "),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Cgroups",target:"_blank",rel:"noopener noreferrer"}},[e._v("cgroup"),t("OutboundLink")],1),e._v("，"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Linux_namespaces",target:"_blank",rel:"noopener noreferrer"}},[e._v("namespace"),t("OutboundLink")],1),e._v("，以及 "),t("a",{attrs:{href:"https://docs.docker.com/storage/storagedriver/overlayfs-driver/",target:"_blank",rel:"noopener noreferrer"}},[e._v("OverlayFS"),t("OutboundLink")],1),e._v(" 类的 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Union_mount",target:"_blank",rel:"noopener noreferrer"}},[e._v("Union FS"),t("OutboundLink")],1),e._v(" 等技术，对进程进行封装隔离，属于 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Operating-system-level_virtualization",target:"_blank",rel:"noopener noreferrer"}},[e._v("操作系统层面的虚拟化技术"),t("OutboundLink")],1),e._v("。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 "),t("a",{attrs:{href:"https://linuxcontainers.org/lxc/introduction/",target:"_blank",rel:"noopener noreferrer"}},[e._v("LXC"),t("OutboundLink")],1),e._v("，从 0.7 版本以后开始去除 "),t("code",[e._v("LXC")]),e._v("，转而使用自行开发的 "),t("a",{attrs:{href:"https://github.com/docker/libcontainer",target:"_blank",rel:"noopener noreferrer"}},[e._v("libcontainer"),t("OutboundLink")],1),e._v("，从 1.11 开始，则进一步演进为使用 "),t("a",{attrs:{href:"https://github.com/opencontainers/runc",target:"_blank",rel:"noopener noreferrer"}},[e._v("runC"),t("OutboundLink")],1),e._v(" 和 "),t("a",{attrs:{href:"https://github.com/containerd/containerd",target:"_blank",rel:"noopener noreferrer"}},[e._v("containerd"),t("OutboundLink")],1),e._v("。")])]),e._v(" "),t("h2",{attrs:{id:"docker-的版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-的版本"}},[e._v("#")]),e._v(" Docker 的版本")]),e._v(" "),t("p",[e._v("Github 地址： https://github.com/moby/moby")]),e._v(" "),t("p",[e._v("Release Notes： https://docs.docker.com/engine/release-notes/")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("截止到目前(2021-02-03) docker 的最新版本是 v20.10.3\n\n\n-v20.10\t截止到目前为止有4个小版本，v20.10.0 - v20.10.3\n-v19.03 截止到目前为止有16个小版本，v19.03.0 - v19.03.15\n\n\ndocker 改名 moby: https://github.com/moby/moby/pull/32691\n原来的 docker-ce 的仓库： https://github.com/docker/docker-ce\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("h2",{attrs:{id:"为什么是-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么是-docker"}},[e._v("#")]),e._v(" 为什么是 Docker")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("在开发的时候，在本机测试环境可以跑，生产环境跑不起来")])]),e._v(" "),t("p",[e._v("这里我们拿java Web应用程序举例，我们一个java Web应用程序涉及很多东西，比如jdk、tomcat、mysql等软件环境。当这些其中某一项版本不一致的时候，可能就会导致应用程序跑不起来这种情况。Docker则将程序以及使用软件环境直接打包在一起，无论在那个机器上保证了环境一致。")]),e._v(" "),t("blockquote",[t("p",[e._v("优势1:  一致的运行环境,更轻松的迁移")]),e._v(" "),t("p",[e._v("以前是打包应用然后部署到服务器。现在是打包应用 + 应用需要的各种环境一起打包。")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了")])]),e._v(" "),t("p",[e._v("这种也是一种比较常见的情况，如果你的程序重要性不是特别高的话，公司基本上不可能让你的程序独享一台服务器的，这时候你的服务器就会跟公司其他人的程序共享一台服务器，所以不可避免地就会受到其他程序的干扰，导致自己的程序出现问题。Docker就很好解决了环境隔离的问题，别人程序不会影响到自己的程序。")]),e._v(" "),t("blockquote",[t("p",[e._v("优势2：对进程进行封装隔离,容器与容器之间互不影响,更高效的利用系统资源")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器")])]),e._v(" "),t("p",[e._v("在没有Docker的情况下，要在几天内部署几十台服务器，这对运维来说是一件非常折磨人的事，而且每台服务器的环境还不一定一样，就会出现各种问题，最后部署地头皮发麻。用Docker的话，我只需要将程序打包到镜像，你要多少台服务，我就给力跑多少容器，极大地提高了部署效率。")]),e._v(" "),t("blockquote",[t("p",[e._v("优势3: 通过镜像复制N多个环境一致容器")])]),e._v(" "),t("p",[t("strong",[e._v("总结")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("更高效的利用系统资源\n更快速的启动时间（秒级）\n一致的运行环境\n持续交付和部署\n更轻松的迁移\n更轻松的维护和扩展\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])])])]),e._v(" "),t("h2",{attrs:{id:"docker和传统虚拟技术的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker和传统虚拟技术的区别"}},[e._v("#")]),e._v(" Docker和传统虚拟技术的区别")]),e._v(" "),t("p",[e._v("下面的图片摘自 Docker 官网："),t("a",{attrs:{href:"https://www.docker.com/resources/what-container",target:"_blank",rel:"noopener noreferrer"}},[e._v("What is a Container?"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/docker/5-%E6%AF%94%E8%BE%83%E5%AE%B9%E5%99%A8%E5%92%8C%E4%BC%A0%E7%BB%9F%E8%99%9A%E6%8B%9F%E5%8C%96.png",alt:"比较容器和传统虚拟化"}})]),e._v(" "),t("blockquote",[t("p",[e._v("（1）容器是应用程序层的抽象，将代码和依赖项打包在一起。 多个容器可以在同一台计算机上运行，并与其他容器共享OS内核，每个容器在用户空间中作为隔离的进程运行。 容器占用的空间少于VM（容器映像的大小通常为几十MB），可以处理更多的应用程序，并且需要的VM和操作系统更少。")]),e._v(" "),t("p",[e._v("（2）虚拟机（VM）是将一台服务器转变为多台服务器的物理硬件的抽象。 系统管理程序允许多个VM在单台计算机上运行。 每个VM包含操作系统，应用程序，必要的二进制文件和库的完整副本-占用数十GB。 VM也可能启动缓慢。")]),e._v(" "),t("p",[e._v("传统虚拟机技术是"),t("code",[e._v("虚拟出一套硬件")]),e._v("后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程。")]),e._v(" "),t("p",[e._v("容器技术是：容器内的应用进程"),t("code",[e._v("直接运行于宿主的内核")]),e._v("，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th"),e._v(" "),t("th",[e._v("传统虚拟机")]),e._v(" "),t("th",[e._v("Docker容器")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("磁盘占用")]),e._v(" "),t("td",[e._v("几个GB到几十个GB左右")]),e._v(" "),t("td",[e._v("几十MB到几百MB左右")])]),e._v(" "),t("tr",[t("td",[e._v("CPU内存占用")]),e._v(" "),t("td",[e._v("虚拟操作系统非常占用CPU和内存")]),e._v(" "),t("td",[e._v("Docker引擎占用极低")])]),e._v(" "),t("tr",[t("td",[e._v("启动速度")]),e._v(" "),t("td",[e._v("（从开机到运行项目）几分钟")]),e._v(" "),t("td",[e._v("（从开启容器到运行项目）几秒")])]),e._v(" "),t("tr",[t("td",[e._v("安装管理")]),e._v(" "),t("td",[e._v("需要专门的运维技术")]),e._v(" "),t("td",[e._v("安装、管理方便")])]),e._v(" "),t("tr",[t("td",[e._v("应用部署")]),e._v(" "),t("td",[e._v("每次部署都费时费力")]),e._v(" "),t("td",[e._v("从第二次部署开始轻松简捷")])]),e._v(" "),t("tr",[t("td",[e._v("耦合性")]),e._v(" "),t("td",[e._v("多个应用服务安装到一起，容易互相影响")]),e._v(" "),t("td",[e._v("每个应用服务一个容器，达成隔离")])]),e._v(" "),t("tr",[t("td",[e._v("系统依赖")]),e._v(" "),t("td",[e._v("无")]),e._v(" "),t("td",[e._v("需求相同或相似的内核，目前推荐是Linux")])])])])])}),[],!1,null,null,null);r.default=n.exports}}]);